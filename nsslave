#!/bin/sh
#-
# Copyright (c) 2006-2012 Parker Lee Ranney TTEE
# Copyright (c) 2017-2019 Devin Teske <dteske@FreeBSD.org>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
############################################################ IDENT(1)
#
# $Title: Distributed bind9 client for applying nsadmin changes $
# $Id: nsslave,v 1.3 2012/05/10 01:15:04 root Exp root $
# $Copyright: 2017-2019 Devin Teske. All rights reserved. $
# $FrauBSD: nsadmin/nsslave 2019-10-13 14:35:44 -0700 freebsdfrau $
#
############################################################ INFORMATION
#
# nsslave -- Update Bind's installation on the slave NS server. See
# 	nsadmin on the master server for details.
#
# --------------------------------------------------------------------
# Notes:
# 	- Requires /etc/nsslave.conf to operate
# 	- Requires user `cm' and appropriate `.ssh/authorized_keys2' file
# 	- User `cm' needs `sudo /usr/local/bin/nsslave' without password
# --------------------------------------------------------------------
# Version History:
# 	Oct 2019: Release 2.2.1
# 		- Add -v flag to get version
# 		- Add usage statement (-h)
# 		- Comments and other minor edits
# 	Oct 2019: Release 2.2
# 		- Runtime OS glue
# 	Jul 2019: Release 2.1
# 		- Initial public release.
# 	Jul 2018: Release 2.0
# 		- Major rewrite and code cleanup.
# 	Jun 2017: Release 1.1
# 		- Ported to FreeBSD.
# 	Jul 2006: Release 1.0
# 		- Update files locally on the slave.
#
############################################################ INCLUDES

NSSLAVE_CONF=/etc/nsslave.conf

############################################################ GLOBALS

VERSION='$Version: 2.2.1 $'

pgm="${0##*/}" # Program basename

PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin

#
# Global exit status
#
SUCCESS=0
FAILURE=1

#
# OS Glue
#
SYSTEMD=

############################################################ FUNCTIONS

have(){ type "$@" > /dev/null 2>&1; }

# usage
#
# Print usage statement to stderr and exit with error status.
#
usage()
{
	local optfmt="\t%-5s %s\n"

	exec >&2
	printf "Usage: %s [-hv]\n" "$pgm"
	printf "Options:\n"
	printf "$optfmt" "-h" "Print usage and exit."
	printf "$optfmt" "-v" "Print version and exit."

	exit $FAILURE
}

# msg text ...
#
# Provide a supplied message to the user and the log file.
#
msg()
{
	logger -p user.info -t Info "$*"
	awk 'sub(/^\\/,"")||1' <<-EOF

	\		$*

	EOF
}

# sigquit
#
# Process a set of commands when a signal is caught by trap.
#
sigquit()
{
	cd "$tmp"
	rm -rf *
}

############################################################ MAIN

#
# Process command-line options
#
while getopts "hv?" flag; do
	case "$flag" in
	v) VERSION="${VERSION#*: }"
		echo "${VERSION% $}"
		exit $SUCCESS ;;
	*) usage # NOTREACHED
	esac
done
shift $(( $OPTIND - 1 ))

#
# Load config
#
. "$NSSLAVE_CONF" || exit


#
# OS Glue
#
have systemctl && SYSTEMD=1

#
# Setup
#
umask 0022
trap "sigquit; exit" EXIT SIGHUP SIGINT SIGQUIT SIGTERM
mkdir -p "$tmp"
cd "$tmp" || exit

#
# Unpack
#
msg "Unpacking zone tarball: $( date )"
tar xvzf zone.tgz 2>&1 | while read line; do
	echo "		$line"
done
rm -f zone.tgz

#
# Permissions
#
msg "Changing ownership and permissions: $( date )"
chown -R "$owner:$group" $views
chmod -R g-w $views

#
# Backup
#
msg "Backing up zone files: $( date )"
for view in $views; do
	for file in $( find "$view" -type f ); do
		res=$( echo "$file" | sed -e 's/\(.*\/\)\(.*\)/\1.bak-\2/' )
		cp "$nameddir/$file" "$nameddir/$res"
	done
done

#
# Push
#
msg "Moving files to $nameddir: $( date )"
for view in $views; do
	find "$view" -type f -exec mv {} "$nameddir/{}" \;
done

#
# Reload
#
msg "Restarting named:$( date )"
printf "\t\t"
if [ "$SYSTEMD" ]; then
	systemctl reload named-chroot
else
	service named reload || pkill -1 named
fi
sleep 1
if ! pgrep named > /dev/null; then
	msg "ERROR: named is not running after reload: $( date )"

	msg "ERROR: attempting manual restart: $( date )"
	if [ "$SYSTEMD" ]; then
		systemctl start named-chroot
	else
		service named start
	fi
	if pgrep named > /dev/null; then
		msg "Manual restart succeeded: $( date )"
		exit $SUCCESS
	fi

	msg "ERROR: manual restart failed: $( date )"
	msg "ERROR: attempting to roll-back: $( date )"

	cd "$nameddir"
	for view in $views; do
		for file in $( find "$view" -name ".bak-*" ); do
			res=$( echo "$file" | sed -e s/.bak-// )
			mv "$file" "$res"
		done
	done
	cd - > /dev/null

	if [ "$SYSTEMD" ]; then
		systemctl start named-chroot
	else
		service named start
	fi
	if pgrep named > /dev/null; then
		msg "Roll-back succeeded: $( date )"
		update=0
		exit $FAILURE
	fi

	echo "$USER: $( date )" |
		mail -s "nsadmin: roll-back failed" "$critical"
	msg "FATAL: roll-back failed ... giving up"
	exit $FAILURE
fi

exit $SUCCESS

################################################################################
# END
################################################################################
